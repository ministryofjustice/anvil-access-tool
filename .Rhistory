"alpha-app-safety-diagnostic-tool/mPris.rda",
overwrite = T)
mPris <- as.data.table(s3tools::read_using(
FUN=load, s3_path = "alpha-app-safety-diagnostic-tool/mPris.rda"))
mPris <- s3tools::download_file_from_s3(
"alpha-app-safety-diagnostic-tool/mPris.rda",
"/home/filippoberio/safety-diagnostic-tool/www/data/mPris_s.rda",
overwrite = T)
rm(Pris)
load(file = "./www/data/mPris.rda")
s3tools::read_using()
s3tools::read_using
tmp <- s3_download_temp_file("alpha-app-safety-diagnostic-tool/mPris.rda")
tmp <- s3tools::s3_download_temp_file("alpha-app-safety-diagnostic-tool/mPris.rda")
s3tools
?s3tools
# load assault smooth models
mPris <- as.data.table(s3tools::read_using(
FUN=attach, s3_path = "alpha-app-safety-diagnostic-tool/mPris.rda"))
atach(file = "./www/data/mPris.rda")
attach(file = "./www/data/mPris.rda")
?attach
attach(what = "./www/data/mPris.rda")
rm(mPris)
attach(what = "./www/data/mPris.rda")
?load
mPris <- s3tools::download_file_from_s3(
"alpha-app-safety-diagnostic-tool/mPris.rda",
"/tmp/mPris_s.rda",
overwrite = T)
load(file = "/tmp/mPris.rda")
mPris <- s3tools::download_file_from_s3(
"alpha-app-safety-diagnostic-tool/mPris.rda",
"/tmp/mPris.rda",
overwrite = T)
load(file = "/tmp/mPris.rda")
runApp()
runApp()
shiny::runApp()
finds <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/finds.feather"))
#load finds data
finds_counts <- s3tools::download_file_from_s3(
"alpha-app-safety-diagnostic-tool/finds_counts.rda",
"/tmp/finds_counts.rda",
overwrite = T)
load(file="/tmp/finds_counts.rda")
runApp()
runApp()
runApp()
assaults <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/assaults.feather"))
runApp()
runApp()
today
today()
now()
# connect to the athena database
queryResult = dbtools::get_athena_query_response(sql,out_path= "s3://alpha-app-safety-diagnostic-tool")
library(reticulate)      # so dbtools will work
library(dbtools)         # to access the athena database
# connect to the athena database
queryResult = dbtools::get_athena_query_response(sql,out_path= "s3://alpha-app-safety-diagnostic-tool")
# connect to the athena database
queryResult = dbtools::get_athena_query_response(select * from nomis_ab_dev.viper, out_path= "s3://alpha-app-safety-diagnostic-tool")
# connect to the athena database
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
# connect to the athena database
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
# connect to the athena database
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
shiny::runApp()
# connect to the athena database
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
runApp()
# connect to the athena database
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
# connect to the athena database
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
# connect to the athena database
queryResult = dbtools::get_athena_query_response("select * from nomis_ab_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
# connect to the athena database
queryResult = dbtools::get_athena_query_response("select * from anvil_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
# connect to the athena database
queryResult = dbtools::get_athena_query_response("select * from anvil_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
# connect to the athena database
queryResult = dbtools::get_athena_query_response("select * from anvil_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
queryResult = dbtools::get_athena_query_response("select * from anvil_dev.viper", out_path= "s3://alpha-app-safety-diagnostic-tool")
s3_location = gsub("s3://", "", queryResult$s3_path)
dat = s3tools::read_using(FUN= readr::read_csv, s3_path= s3_location)
View(dat)
queryResult = dbtools::get_athena_query_response("show tables", out_path= "s3://alpha-app-safety-diagnostic-tool")
s3_location = gsub("s3://", "", queryResult$s3_path)
dat = s3tools::read_using(FUN= readr::read_csv, s3_path= s3_location)
View(dat)
queryResult = dbtools::get_athena_query_response("show tables", out_path= "s3://alpha-app-safety-diagnostic-tool")
queryResult = dbtools::get_athena_query_response("show tables", out_path= "s3://alpha-app-safety-diagnostic-tool")
queryAthena = function(sql_string, s3_bucket){
queryResult = dbtools::get_athena_query_response(sql_string, out_path = s3_bucket)
s3_location = gsub("s3://", "", queryResult$s3_path)
dat = s3tools::read_using(FUN= readr::read_csv, s3_path= s3_location)
return(dat)
}
viper = queryAthena(sql_string = "select * from anvil_dev.viper",
s3_bucket = "s3://alpha-app-safety-diagnostic-tool")
viper = queryAthena(sql_string = "select * tables",
s3_bucket = "s3://alpha-app-safety-diagnostic-tool")
viper = queryAthena(sql_string = "show tables;",
s3_bucket = "s3://alpha-app-safety-diagnostic-tool")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
# global.R --------------------------------------------------------------------====================
# this is the global.R file for the Safety App
# it's purpose is to load the necessary librarys that are used in the app
# as well as loading the required data sources
#
# Load librarys ---------------------------------------------------------------====================
#setwd("/syslog-server/data1/anvil_work/stability/stability-report")
#install.packages("shiny")
#install.packages("shinydashboard")
#install.packages("shinyjs")
#install.packages("shinyWidgets")
#install.packages("shinyBS")
#install.packages("feather")
#install.packages("plyr")
#install.packages("data.table")
#install.packages("tidyr")
#install.packages("ggplot2")
#install.packages("scales")
#install.packages("tools")
#install.packages("lubridate")
#install.packages("zoo")
#install.packages("jsonlite")
#install.packages("gplots")
#install.packages("RColorBrewer")
#install.packages("packrat")
library(shiny)           # required to make shiny functions work
library(shinyjs)         # required to make shiny javascript functions work
library(shinydashboard)  # required for the dashboard functions to work
library(shinyWidgets)    # required for turning radio buttons into boxes
library(shinyBS)         # popovers for the help functionality
library(feather)         # to load the files quickly
library(plyr)            # reason
library(tidyr)           # reason
library(DT)              # reason
library(data.table)      # reason
library(ggplot2)         # reason
library(scales)          # reason
library(tools)           # reason
library(lubridate)       # reason
library(zoo)             # reason
library(jsonlite)        # reason
library(gplots)          # reason
library(RColorBrewer)    # reason
log_start <- now()
# Load data from local r binary files -----------------------------------------====================
print(paste("start:", difftime(now(), log_start, unit = "secs")))
population <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/population.feather"))
print(paste("population:", difftime(now(), log_start, unit = "secs")))
incidents <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/incidents.feather"))
print(paste("incidents:", difftime(now(), log_start, unit = "secs")))
assaults <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/assaults.feather"))
print(paste("assaults:", difftime(now(), log_start, unit = "secs")))
selfharm <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/selfharm.feather"))[
,
`:=`(hour = ordered(hour(lubridate::hms(incident_time)),
levels = as.character(0:23)),
day = ordered(weekdays(incident_date),
levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")))]
print(paste("selfharm:", difftime(now(), log_start, unit = "secs")))
disorder <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/disorder.feather"))
print(paste("disorder:", difftime(now(), log_start, unit = "secs")))
finds <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/finds.feather"))
print(paste("finds:", difftime(now(), log_start, unit = "secs")))
assaults_inv <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/assaults_inv.feather"))
print(paste("assaults_inv:", difftime(now(), log_start, unit = "secs")))
selfharm_inv <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/selfharm_inv.feather"))
print(paste("selfharm_inv:", difftime(now(), log_start, unit = "secs")))
disorder_inv <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/disorder_inv.feather"))
print(paste("disorder_inv:", difftime(now(), log_start, unit = "secs")))
finds_inv <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/finds_inv.feather"))
print(paste("finds_inv:", difftime(now(), log_start, unit = "secs")))
acute_vio <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/acute_vio.feather"))
print(paste("acute_vio:", difftime(now(), log_start, unit = "secs")))
prison_units <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/prison_units.feather"))
print(paste("prison_units:", difftime(now(), log_start, unit = "secs")))
prison_options <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/prison_options.feather"))
print(paste("prison_options:", difftime(now(), log_start, unit = "secs")))
moves <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/moves.feather"))
print(paste("moves:", difftime(now(), log_start, unit = "secs")))
# load self harm data
sh_methods <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/sh_methods.feather"))
sh_methods <- sh_methods[, method_gr := rep(c(" "), nrow(sh_methods))]
sh_methods[method == "Cutting", "method_gr"] <- "Cutting"
sh_methods[method %in% c("Hanging", "Noose Ligature Making",
"Strangulation", "Suffocation"), "method_gr"] <- "Suffocation"
sh_methods[method == "Ingestion", "method_gr"] <- "Ingestion"
sh_methods[!(method %in% c("Cutting", "Hanging",
"Noose Ligature Making", "Strangulation",
"Suffocation", "Ingestion")), "method_gr"] <- "Other"
print(paste("sh_methods:", difftime(now(), log_start, unit = "secs")))
sh_incidents <- as.data.table(s3tools::read_using(
FUN=feather::read_feather, s3_path = "alpha-app-safety-diagnostic-tool/sh_incidents.feather"))
print(paste("sh_incidents:", difftime(now(), log_start, unit = "secs")))
### To be taken out and included in overnight run!
sh_incidents_trend <- sh_incidents[, .N, .(prison, incident_time)] %>%
merge(.,
data.table(incident_time = seq(from = min(sh_incidents$incident_time),
to = max(sh_incidents$incident_time),
by="+1 day")),
by = "incident_time",
all.y = TRUE) %>%
complete(prison, incident_time) %>%
replace_na(list(N = 0)) %>%
dplyr::arrange(prison, incident_time) %>%
as.data.table(.) %>%
.[, .(incident_time = incident_time, N_overall = N, sum_roll_overall = rollsum(N, 28, fill = NA, align = "right")), by = prison]
sh_firstincidents_trend <- sh_incidents %>%
dplyr::group_by(prison, offender_id_display) %>%
dplyr::slice(which.min(incident_time)) %>%
as.data.table(.) %>%
.[, .N, .(prison, incident_time)]%>%
merge(.,
data.table(incident_time = seq(from = min(sh_incidents$incident_time),
to = max(sh_incidents$incident_time),
by="+1 day")),
by = "incident_time",
all.y = TRUE) %>%
complete(prison, incident_time) %>%
replace_na(list(N = 0)) %>%
dplyr::arrange(prison, incident_time) %>%
as.data.table(.) %>%
.[, .(incident_time = incident_time, N_firstinc = N, sum_roll_firstinc = rollsum(N, 28, fill = NA, align = "right")), by = prison]
sh_individuals_trend <- sh_incidents[, .N, .(prison, incident_time, offender_id_display)]%>%
merge(.,
data.table(incident_time = seq(from = min(sh_incidents$incident_time),
to = max(sh_incidents$incident_time),
by="+1 day")),
by = "incident_time",
all.y = TRUE) %>%
complete(prison, incident_time) %>%
replace_na(list(N = 0)) %>%
dplyr::arrange(prison, incident_time, offender_id_display) %>%
as.data.table(.) %>%
.[, .(N = uniqueN(offender_id_display, na.rm = TRUE)), .(prison, incident_time)] %>%
.[, .(incident_time = incident_time, N_indiv = N, sum_roll_indiv = rollsum(N, 28, fill = NA, align = "right")), by = prison]
sh_incident_trend <- merge(sh_incidents_trend,
sh_firstincidents_trend,
by = c("prison", "incident_time"),
all= TRUE)
sh_incident_trend <- merge(sh_incident_trend,
sh_individuals_trend,
by = c("prison", "incident_time"),
all = TRUE)
feather_to_s3 = function(object, file_name, path){
write_feather(object, paste0("tmp_files/",file_name, ".feather"))
s3tools::write_file_to_s3(paste0(file_name, ".feather"),
paste0(path, "/test_", file_name, ".feather"),
overwrite = TRUE)
}
feather_to_s3(sh_incident_trend, "sh_incident_trend", "alpha-app-safety-diagnostic-tool")
feather_to_s3 = function(object, file_name, path){
write_feather(object, paste0(file_name, ".feather"))
s3tools::write_file_to_s3(paste0(file_name, ".feather"),
paste0(path, "/test_", file_name, ".feather"),
overwrite = TRUE)
}
feather_to_s3(sh_incident_trend, "sh_incident_trend", "alpha-app-safety-diagnostic-tool")
s3tools::write_file_to_s3(paste0(file_name, ".feather"),
paste0(path, "/", file_name, ".feather"),
overwrite = TRUE)
feather_to_s3 = function(object, file_name, path){
write_feather(object, paste0(file_name, ".feather"))
s3tools::write_file_to_s3(paste0(file_name, ".feather"),
paste0(path, "/", file_name, ".feather"),
overwrite = TRUE)
}
feather_to_s3(sh_incident_trend, "sh_incident_trend", "alpha-app-safety-diagnostic-tool")
runApp()
feather_to_s3(sh_prolificacyweeks, "sh_prolificacyweeks", "alpha-app-safety-diagnostic-tool")
feather_to_s3(sh_prolificacyyears, "sh_prolificacyyears", "alpha-app-safety-diagnostic-tool")
feather_to_s3(sh_prolificacyyears, "sh_prolificacyyears", "alpha-app-safety-diagnostic-tool")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?uiOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyWidgetsGallery()
shiny::runApp()
packrat::clean()
update.packages()
update.packages("packrat")
packrat::snapshot()
packrat::snapshot()
getOptions("repos")
getOption("repos")
r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
getOption("repos")
packrat::snapshot()
update.packages()
n
shiny::runApp()
install.packages("gplots")
packrat::on()
packrat::status()
install.packages("backports")
restore()
packratrestore()
packrat::restore()
packrat::status()
packrat::clean()
packrat::snapshot()
runApp()
install.packages("gplots")
getOption("repos")
packrat::install("gplots")
runApp()
runApp()
runApp()
runApp()
devtools::install_github('rstudio/packrat')
packrat::snapshot()
install.packages("gplots")
r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
packrat::clean()
packrat::init()
packrat::snapshot()
shiny::runApp()
upgrade.packages("shiny")
update.packages("shiny")
install.packages(c("shiny", "shinydashboard", "shinyWidgets"))
packrat::snapshot()
install.packages(c("backports", "bindrcpp", "digest", "dplyr", "DT"))
install.packages(c("evaluate", "feather", "ggplot2", "highr"))
install.packages(c("hms", "httr", "jsonlite", "knitr", "lubridate"))
install.packages(c("markdown", "mime", "purrr", "R6", "reshape2", "rmarkdown", "rprojroot", "scales", "sourcetools", "stringi"))
install.packages(c("stringr", "tidyr", "tidyselect", "viridisLite", "xtable", "zoo"))
packrat::snapshot()
shiny::runApp()
runApp()
library(linteR)
library(lintr)
install.packages("lintr")
?lintr
library(lintr)
?lintr
lint("global.R")
lint("global.R")
lint("global.R")
lint("global.R")
lint("trim_data.R")
lint("/www/r_scripts/trim_data.R")
lint("./www/r_scripts/trim_data.R")
lint("./www/r_scripts/trim_data.R")
lint("./www/r_scripts/trim_data.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboardPlus")
library(shinydashboardPlus)
shinydashboardPlusGallery()
install.packages(c("styler","shinyAce","shinyqui"))
shinydashboardPlusGallery()
install.packages("shinyjqui")
shinydashboardPlusGallery()
shinydashboardPlusGallery()
runApp()
runApp()
runApp()
runApp()
runApp()
renderPrint
renderPrint
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
